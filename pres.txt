Gitolite

What is Gitolite?
-----------------
- A multi-user git repository management system.
- Uses SSH for authentication.
- Highly configurable repo- and branch-level permissions.
- Scales to 1000s of users and repositories.

Gitolite Installation (as user "git")
-------------------------------------
Log in as a new user "git".
Put ~git/bin in the $PATH.

  git clone git://github.com/sitaramc/gitolite
  cd gitolite/
  src/gl-system-install 
  gl-setup <your SSH public key>

*** FROM THIS POINT ON:
Do not do anything else as user "git" ever again!
(Except some advanced stuff.)

Configuration via Git
---------------------

  git clone git@localhost:gitolite-admin

1. Add some ssh keys to keydir.
2. Create a repository and give people access.
3. Check your access:

  ssh git@localhost info

Groups of Users and Repositories
--------------------------------

@projects = project1 project2
@admins = paul
@coders = paul david jeremy ryantm russ coder
@gatekeepers = paul ryantm

Branch/Tag-Level Permissions
----------------------------
RW+ feature/	= @coders
RW  master$	= @gatekeepers
RW  refs/tags/v[0-9]+	= jeremy

Refs match (perl) regular expressions.

Summary of permissions:

  R read
  W write (push)
  + non-fast-forward update
  C create branch/tag
  D delete branch/tag
  - deny permissions

More Advanced Patterns
----------------------
RW+ dev/USER/	= @coders
RW+ NAME/Makefile = paul

Global Hooks
------------
Put hooks in ~git/.gitolite/hooks/common, then run setup again.
See instructions if you need the update hook.

Wildcard Repositories
---------------------
Enable in ~git/.gitolite.rc
Allow users to create new repositories:

repo	personal/CREATOR/.*
	C	=   @all
	RW+	=   CREATOR
	RW	=   WRITERS
	R	=   READERS

Users can update permissions:

ssh git@localhost setperms <repo>
READERS paul
WRITERS david jeremy
